<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:icon="clr-namespace:Material.Icons.WPF;assembly=Material.Icons.WPF"
                    >
    <Style x:Key="DefaultButtonStyle" TargetType="Button">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontSize" Value="16"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            
        </Style.Triggers>
    </Style>

    <Style x:Key="PrimaryButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="7">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,5,10,5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverColor}"/>
            </Trigger>
            
        </Style.Triggers>
    </Style>
    <Style x:Key="WhiteButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="7" BorderThickness="1" BorderBrush="LightGray">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,5,10,5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red"/>
            </Trigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="AlertButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="OrangeRed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="7">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,5,10,5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#D14905"/>
            </Trigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="AddButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Width="100" CornerRadius="7" Background="{TemplateBinding Background}" >
                        <StackPanel Orientation="Horizontal">
                            <icon:MaterialIcon Width="25" Kind="Plus" FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            <TextBlock  FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="Add" FontSize="16" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SaveButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Width="120" CornerRadius="7" Background="{TemplateBinding Background}" >
                        <StackPanel Orientation="Horizontal">
                            <icon:MaterialIcon  Kind="ContentSave" Width="25" FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            <TextBlock  FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="Lưu" FontSize="16" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CancelButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Width="120" CornerRadius="7" Background="{TemplateBinding Background}" >
                        <StackPanel Orientation="Horizontal">
                            <icon:MaterialIcon  Kind="Remove" Width="25" FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            <TextBlock  FontWeight="Bold" Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="Huỷ" FontSize="16" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonHoverColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EditButton" TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="2,0,2,0" Height="35" CornerRadius="7"  Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{TemplateBinding Foreground}" HorizontalAlignment="Center" >
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                            <TextBlock  Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="Edit" FontSize="16" VerticalAlignment="Center"/>
                        </TextBlock>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#4681f4"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ViewButton" TargetType="Button">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Green"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="2,0,2,0" Height="35" CornerRadius="7" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{TemplateBinding Foreground}" HorizontalAlignment="Center" >
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock  Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="View" FontSize="16" VerticalAlignment="Center"/>
                    </TextBlock>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Green"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RedButton" TargetType="Button">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Padding="2,0,2,0" Height="35" CornerRadius="7" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{TemplateBinding Foreground}" HorizontalAlignment="Center" >
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                            <TextBlock  Foreground="{TemplateBinding Foreground}" Margin="10,0,10,0" Text="{TemplateBinding Content}" FontSize="16" VerticalAlignment="Center"/>
                        </TextBlock>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ED0800"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RadioButtonStyle" TargetType="RadioButton" >
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryColor}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <BulletDecorator Background="White" Cursor="Hand">
                        <BulletDecorator.Bullet>
                            <Grid Height="22" Width="22">
                                <!--Define size of the Bullet-->
                                <!--The two borders-->
                                <Border Name="RadioOuter" Background="Transparent" BorderBrush="{TemplateBinding Background}" BorderThickness="2" CornerRadius="2" />
                                <Border CornerRadius="0" Margin="4" Name="RadioMark" Background="{TemplateBinding Background}" Visibility="Hidden" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!--Text element-->
                        <TextBlock Margin="10,1,0,0" Foreground="{TemplateBinding Foreground}" FontFamily="Calibri" FontSize="20">
                        <ContentPresenter />
                        </TextBlock>
                    </BulletDecorator>
                    <!--If item is checked, trigger the visibility of the mark-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RadioOuter" Property="BorderBrush" Value="#FFADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ToggleStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ToggleStyle}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Border x:Name="on" Width="50" Height="25" Background="LightGray" CornerRadius="2,0,0,4" Margin="10,0,0,0">
                            <TextBlock x:Name="onText" Text="ON" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <Border x:Name="off" Width="50" Height="25" Background="LightGray" CornerRadius="0,2,4,0">
                            <TextBlock x:Name="offText" Text="OFF" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="on" Property="Background" Value="Orange"/>
                            <Setter TargetName="onText" Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="off" Property="Background" Value="Orange"/>
                            <Setter TargetName="offText" Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
</ResourceDictionary>